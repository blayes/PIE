        for (jj in 1:ncol(dataMat)) {
            if (jj %% 500 == 0) cat("jj: ", jj, "\n")
            cidx <- which(nnas[ , 2] == jj)
            mrmat <- meanRow[nnas[cidx, 1], , drop = FALSE]
            yobs <- dataMat[nnas[cidx, 1], jj]
            wmatInv <- sig0 / nobs * (crossprod(mrmat, mrmat) + apply(varRow[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(wmatInv)
            varCol[jj, , ] <- chol2inv(umat)
            meanCol[jj, ] <- as.numeric(sig0 / nobs * varCol[jj, , ] %*% crossprod(mrmat, yobs))
        }

    meanRow <- meanRowMat0
    meanCol <- meanColMat0
    varRow <- aperm(array(varRow0, dim = c(nrank, nrank, nrat)), perm = c(3, 1, 2))
    varCol <- aperm(array(varCol0, dim = c(nrank, nrank, nfeat)), perm = c(3, 1, 2))

        smc <- colSums(meanCol^2)
        smr <- colSums(meanRow^2)


        for (kk in 1:nrank) {
            bb[kk] <- (smc[kk] + smr[kk] + sum(varCol[ , kk, kk]) + sum(varRow[ , kk, kk])) / 2
        }
    }


nnas
niter <- 100
    for (ss in 1:niter) {
        if (ss %% 10 == 0) cat("iter: ", ss, "\n")

        for (ii in 1:nrow(dataMat)) {
            if (ii %% 1000 == 0) cat("ii: ", ii, "\n")
            ridx <- which(nnas[ , 1] == ii)
            mcmat <- meanCol[nnas[ridx, 2], , drop = FALSE]
            yobs <- dataMat[ii, nnas[ridx, 2]]
            vmatInv <- sig0 / nobs * (crossprod(mcmat, mcmat) + apply(varCol[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(vmatInv)
            varRow[ii, , ] <- chol2inv(umat)
            meanRow[ii, ] <- as.numeric(sig0 / nobs * varRow[ii, , ] %*% crossprod(mcmat, yobs))
        }

        for (jj in 1:ncol(dataMat)) {
            if (jj %% 500 == 0) cat("jj: ", jj, "\n")
            cidx <- which(nnas[ , 2] == jj)
            mrmat <- meanRow[nnas[cidx, 1], , drop = FALSE]
            yobs <- dataMat[nnas[cidx, 1], jj]
            wmatInv <- sig0 / nobs * (crossprod(mrmat, mrmat) + apply(varRow[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(wmatInv)
            varCol[jj, , ] <- chol2inv(umat)
            meanCol[jj, ] <- as.numeric(sig0 / nobs * varCol[jj, , ] %*% crossprod(mrmat, yobs))
        }

    meanRow <- meanRowMat0
    meanCol <- meanColMat0
    varRow <- aperm(array(varRow0, dim = c(nrank, nrank, nrat)), perm = c(3, 1, 2))
    varCol <- aperm(array(varCol0, dim = c(nrank, nrank, nfeat)), perm = c(3, 1, 2))

        smc <- colSums(meanCol^2)
        smr <- colSums(meanRow^2)


        for (kk in 1:nrank) {
            bb[kk] <- (smc[kk] + smr[kk] + sum(varCol[ , kk, kk]) + sum(varRow[ , kk, kk])) / 2
        }
    }

meanCol[nnas[rids, 2], ]
meanCol[nnas[ridx, 2], ]
meanCol

dim(mat)
head(meanCol)
head(meanCol0)
head(meanRow0)
varRow0
dataMat <- mat
nobs
    meanRow <- meanRow0
    meanCol <- meanCol0
    varRow <- aperm(array(varRow0, dim = c(nrank, nrank, nrat)), perm = c(3, 1, 2))
    varCol <- aperm(array(varCol0, dim = c(nrank, nrank, nfeat)), perm = c(3, 1, 2))

nnas
head(nnas)
b0
meanRow
        for (ii in 1:nrow(dataMat)) {
            if (ii %% 1000 == 0) cat("ii: ", ii, "\n")
            ridx <- which(nnas[ , 1] == ii)
            mcmat <- meanCol[nnas[ridx, 2], , drop = FALSE]
            yobs <- dataMat[ii, nnas[ridx, 2]]
            vmatInv <- sig0 / nobs * (crossprod(mcmat, mcmat) + apply(varCol[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(vmatInv)
            varRow[ii, , ] <- chol2inv(umat)
            meanRow[ii, ] <- as.numeric(sig0 / nobs * varRow[ii, , ] %*% crossprod(mcmat, yobs))
        }

sig0 <- 1
        for (ii in 1:nrow(dataMat)) {
            if (ii %% 1000 == 0) cat("ii: ", ii, "\n")
            ridx <- which(nnas[ , 1] == ii)
            mcmat <- meanCol[nnas[ridx, 2], , drop = FALSE]
            yobs <- dataMat[ii, nnas[ridx, 2]]
            vmatInv <- sig0 / nobs * (crossprod(mcmat, mcmat) + apply(varCol[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(vmatInv)
            varRow[ii, , ] <- chol2inv(umat)
            meanRow[ii, ] <- as.numeric(sig0 / nobs * varRow[ii, , ] %*% crossprod(mcmat, yobs))
        }

        for (jj in 1:ncol(dataMat)) {
            if (jj %% 500 == 0) cat("jj: ", jj, "\n")
            cidx <- which(nnas[ , 2] == jj)
            mrmat <- meanRow[nnas[cidx, 1], , drop = FALSE]
            yobs <- dataMat[nnas[cidx, 1], jj]
            wmatInv <- sig0 / nobs * (crossprod(mrmat, mrmat) + apply(varRow[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(wmatInv)
            varCol[jj, , ] <- chol2inv(umat)
            meanCol[jj, ] <- as.numeric(sig0 / nobs * varCol[jj, , ] %*% crossprod(mrmat, yobs))
        }

meanRowMat0
niter <- 10
    for (ss in 1:niter) {
        if (ss %% 10 == 0) cat("iter: ", ss, "\n")

        for (ii in 1:nrow(dataMat)) {
            if (ii %% 1000 == 0) cat("ii: ", ii, "\n")
            ridx <- which(nnas[ , 1] == ii)
            mcmat <- meanCol[nnas[ridx, 2], , drop = FALSE]
            yobs <- dataMat[ii, nnas[ridx, 2]]
            vmatInv <- sig0 / nobs * (crossprod(mcmat, mcmat) + apply(varCol[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(vmatInv)
            varRow[ii, , ] <- chol2inv(umat)
            meanRow[ii, ] <- as.numeric(sig0 / nobs * varRow[ii, , ] %*% crossprod(mcmat, yobs))
        }

        for (jj in 1:ncol(dataMat)) {
            if (jj %% 500 == 0) cat("jj: ", jj, "\n")
            cidx <- which(nnas[ , 2] == jj)
            mrmat <- meanRow[nnas[cidx, 1], , drop = FALSE]
            yobs <- dataMat[nnas[cidx, 1], jj]
            wmatInv <- sig0 / nobs * (crossprod(mrmat, mrmat) + apply(varRow[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(wmatInv)
            varCol[jj, , ] <- chol2inv(umat)
            meanCol[jj, ] <- as.numeric(sig0 / nobs * varCol[jj, , ] %*% crossprod(mrmat, yobs))
        }

    ## meanRow <- meanRowMat0
    ## meanCol <- meanColMat0
    ## varRow <- aperm(array(varRow0, dim = c(nrank, nrank, nrat)), perm = c(3, 1, 2))
    ## varCol <- aperm(array(varCol0, dim = c(nrank, nrank, nfeat)), perm = c(3, 1, 2))

        smc <- colSums(meanCol^2)
        smr <- colSums(meanRow^2)


        for (kk in 1:nrank) {
            bb[kk] <- (smc[kk] + smr[kk] + sum(varCol[ , kk, kk]) + sum(varRow[ , kk, kk])) / 2
        }
    }
niter <- 100
    for (ss in 1:niter) {
        if (ss %% 10 == 0) cat("iter: ", ss, "\n")

        for (ii in 1:nrow(dataMat)) {
            if (ii %% 1000 == 0) cat("ii: ", ii, "\n")
            ridx <- which(nnas[ , 1] == ii)
            mcmat <- meanCol[nnas[ridx, 2], , drop = FALSE]
            yobs <- dataMat[ii, nnas[ridx, 2]]
            vmatInv <- sig0 / nobs * (crossprod(mcmat, mcmat) + apply(varCol[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(vmatInv)
            varRow[ii, , ] <- chol2inv(umat)
            meanRow[ii, ] <- as.numeric(sig0 / nobs * varRow[ii, , ] %*% crossprod(mcmat, yobs))
        }

        for (jj in 1:ncol(dataMat)) {
            if (jj %% 500 == 0) cat("jj: ", jj, "\n")
            cidx <- which(nnas[ , 2] == jj)
            mrmat <- meanRow[nnas[cidx, 1], , drop = FALSE]
            yobs <- dataMat[nnas[cidx, 1], jj]
            wmatInv <- sig0 / nobs * (crossprod(mrmat, mrmat) + apply(varRow[nnas[ridx, 2], , ], 2:3, sum)) + (a0 + (nrat + nfeat) / 2) * diag(1 / bb)
            umat <- chol(wmatInv)
            varCol[jj, , ] <- chol2inv(umat)
            meanCol[jj, ] <- as.numeric(sig0 / nobs * varCol[jj, , ] %*% crossprod(mrmat, yobs))
        }

    ## meanRow <- meanRowMat0
    ## meanCol <- meanColMat0
    ## varRow <- aperm(array(varRow0, dim = c(nrank, nrank, nrat)), perm = c(3, 1, 2))
    ## varCol <- aperm(array(varCol0, dim = c(nrank, nrank, nfeat)), perm = c(3, 1, 2))

        smc <- colSums(meanCol^2)
        smr <- colSums(meanRow^2)


        for (kk in 1:nrank) {
            bb[kk] <- (smc[kk] + smr[kk] + sum(varCol[ , kk, kk]) + sum(varRow[ , kk, kk])) / 2
        }
    }
meanRow
res <- completeMatrixVb (mat, 2, 20) 
res <- completeMatrixVb (mat, 2, 20) 
res <- completeMatrixVb (mat, 2, 20) 
res <- completeMatrixVb (mat, 2, 20) 
res <- completeMatrixVb (mat, 2, 100) 
res$row
res$row$var
boxplot(res$row$var)
boxplot(res$row$mu)
head(res$row$mu)
head(res$row$mu)
head(res$col$mu)
(res$col$cov)
(res$row$cov)
dim(mat)
ms <- array(0.0, dim = c(200, 2, 1000))
ns <- array(0.0, dim = c(10, 2, 1000))
sims <- array(0.0, dim = c(200, 10, 1000))
for (ii in 1:1000) {
    for (rr in 1:200) {
        covm <- res$row$cov[ , , rr]
        mum <- res$row$mu[rr, ]
        ms[rr , , ii] <- rmvnorm(1, mum, covm)
    }
    for (cc in 1:10) {
        covn <- res$col$cov[ , , cc]
        mun <- res$col$mu[cc, ]
        ns[cc , , ii] <- rmvnorm(1, mun, covn)
    }

    sims[ , , ii] <- ms[ , , ii] %*% t(ns[cc , , ii])
}

library(mvtnorm)
ms <- array(0.0, dim = c(200, 2, 1000))
ns <- array(0.0, dim = c(10, 2, 1000))
sims <- array(0.0, dim = c(200, 10, 1000))
for (ii in 1:1000) {
    for (rr in 1:200) {
        covm <- res$row$cov[ , , rr]
        mum <- res$row$mu[rr, ]
        ms[rr , , ii] <- rmvnorm(1, mum, covm)
    }
    for (cc in 1:10) {
        covn <- res$col$cov[ , , cc]
        mun <- res$col$mu[cc, ]
        ns[cc , , ii] <- rmvnorm(1, mun, covn)
    }

    sims[ , , ii] <- ms[ , , ii] %*% t(ns[cc , , ii])
}

ms <- array(0.0, dim = c(200, 2, 1000))
ns <- array(0.0, dim = c(10, 2, 1000))
sims <- array(0.0, dim = c(200, 10, 1000))
for (ii in 1:1000) {
    for (rr in 1:200) {
        covm <- res$row$cov[ , , rr]
        mum <- res$row$mu[rr, ]
        ms[rr , , ii] <- rmvnorm(1, mum, covm)
    }
    for (cc in 1:10) {
        covn <- res$col$cov[ , , cc]
        mun <- res$col$mu[cc, ]
        ns[cc , , ii] <- rmvnorm(1, mun, covn)
    }

    sims[ , , ii] <- ms[ , , ii] %*% t(ns[ , , ii])
}

sims[ , , 1]
apply(sims, 1:2, function(x) svd(x)$d)
tmp2 <- apply(sims, 1:2, function(x) svd(x)$d)
head(tmp2)
colSums(tmp2)
colMeans(tmp2)
svd(sims[,,1])
tmp2 <- svd(sims[,,1])
tmp2$d
tmp2 <- apply(sims, 3, function(x) svd(x)$d)
tmp2
dim(tmp2 <- 
dim(tmp2)
rowMeans(tmp2)
rm(list=ls())
resvb <- completeMatrixVb(mat, 2, 200)
vbds
vbdsSds
str(res$dataMat)
ds
ds
dsSds
vbdsSds
ms <- array(0.0, dim = c(200, 2, 1000))
ns <- array(0.0, dim = c(10, 2, 1000))
sims <- array(0.0, dim = c(200, 10, 1000))
for (ii in 1:1000) {
    for (rr in 1:200) {
        covm <- resvb$row$cov[ , , rr]
        mum <- resvb$row$mu[rr, ]
        ms[rr , , ii] <- mum + crossprod(chol(covm), rnorm(2))
    }
    for (cc in 1:10) {
        covn <- resvb$col$cov[ , , cc]
        mun <- resvb$col$mu[cc, ]
        ns[cc , , ii] <- mun + crossprod(chol(covn), rnorm(2))
    }
    sims[ , , ii] <- ms[ , , ii] %*% t(ns[ , , ii])
}

vbds
est <- resvb$row$mu %*% t(resvb$col$mu)
head(est)
head(mat)
head(gg$y)
mean((abs(gg$y - est))^2)
head(mest)
head(mest)
dim(mest)
mean((abs(gg$y - mest))^2)
mean((abs(gg$y - est))^2)
svd(mest)$d
svd(est)$d
svd(gg$y)$d
gg
names(gg)
head(gg$y)
svd(gg$y)
svd(gg$y)$d
svd(gg2$y)$d
svd(gg$rmat %*% t(gg$cmat * matrix(rev(2:1), ncol=2, nrow=2, byrow=T)))$d
svd(gg$rmat %*% t(gg$cmat * matrix(rev(2:1), ncol=2, nrow=10, byrow=T)))$d
(gg$cmat * matrix(rev(2:1), ncol=2, nrow=10, byrow=T))
dim(gg$cmat)
svd(gg$rmat[,1:2] %*% t(gg$cmat[,1:2] * matrix(rev(2:1), ncol=2, nrow=10, byrow=T)))$d
svd(gg2$y)$d
svd(gg$y)$d
ms <- array(0.0, dim = c(200, 2, 1000))
ns <- array(0.0, dim = c(10, 2, 1000))
sims <- array(0.0, dim = c(200, 10, 1000))
for (ii in 1:1000) {
    for (rr in 1:200) {
        covm <- resvb$row$cov[ , , rr]
        mum <- resvb$row$mu[rr, ]
        ms[rr , , ii] <- mum + crossprod(chol(covm), rnorm(2))
    }
    for (cc in 1:10) {
        covn <- resvb$col$cov[ , , cc]
        mun <- resvb$col$mu[cc, ]
        ns[cc , , ii] <- mun + crossprod(chol(covn), rnorm(2))
    }
    sims[ , , ii] <- ms[ , , ii] %*% t(ns[ , , ii])
}


vbds
vbdsSds
ds
dsSds
vbdsSds
svd(gg$y)
svd(gg$y)$d
ds <- rowMedians(apply(res$dataMat, 3, function(x) svd(x)$d))
ds
vbds
ds
vbdsSds
dsSds <- rowMads(apply(res$dataMat, 3, function(x) svd(x)$d))
dsSds
dsSds
vbdsSds
gg$fix
gg$rmat[ , 1:2] %*% (t(gg$cmat[ , 1:2] * matrix(rev(1:2), nrow = 10, ncol = 2, byrow = TRUE)))
fix <- gg$rmat[ , 1:2] %*% (t(gg$cmat[ , 1:2] * matrix(rev(1:2), nrow = 10, ncol = 2, byrow = TRUE)))
svd(fix)$d
getwd()
rm(list=ls())
id <- 1
id <- 1
head(train$x)
dim(train$x)
plot(res$elbo)
names(res)
names(res$coefs)
names(res$coefs$muMat)
(res$coefs$muMat)
(res$coefs$muMat[1:13])
plot(res$coefs$muMat[1:13])
names(res$coefs)
(res$coefs$sigmaMat[1:13, 1:13])
image(res$coefs$sigmaMat[1:13, 1:13])
image(res$coefs$sigmaMat[2:13, 2:13])
names(res)
names(res$cov)
(res$scaleSigmaMat)
str(res$scaleSigmaMat)
str(res)
str(res$cov$scaleSigmaMat)
(res$cov$scaleSigmaMat)
image(res$cov$scaleSigmaMat)
solve(res$cov$scaleSigmaMat)
cvtrain <- readRDS("../data/train_bwt.rds")
str(train$x)
str(train$group)
unique(train$group)
yvec <- train$y
xmat <- train$x
zmat <- train$z
group <- train$group
    library(Matrix)
    library(MCMCpack)

    nfixef <- ncol(xmat)
    nranef <- ncol(zmat)
    grpLbl <- sort(unique(group))
    ngroup <- length(grpLbl)
    ndim <- nrow(xmat)

    elbo <- numeric(niter)

    ranefList <- list()
    grpIdx <- list()
    for (ii in 1:ngroup) {
        grpIdx[[ii]] <- which(group == grpLbl[ii])
        ranefList[[ii]] <- zmat[grpIdx[[ii]], , drop = FALSE]
    }
    ranefMat <- bdiag(ranefList)

    nfixef <- ncol(xmat)
    nranef <- ncol(zmat)
    grpLbl <- sort(unique(group))

grpLb
grpLbl
    ngroup <- length(grpLbl)
ngroup
    ndim <- nrow(xmat)
ndim
    elbo <- numeric(niter)
    ranefList <- list()
    grpIdx <- list()
    for (ii in 1:ngroup) {
        grpIdx[[ii]] <- which(group == grpLbl[ii])
        ranefList[[ii]] <- zmat[grpIdx[[ii]], , drop = FALSE]
    }
    ranefMat <- bdiag(ranefList)

image(ranefMat)
    fixefMat <- xmat[unlist(grpIdx), ]
image(fixefMat)
    designMat <- cBind(fixefMat, ranefMat)
    designTransDesign <- crossprod(designMat, designMat)
    ordY <- yvec[unlist(grpIdx)]
    ordGrp <- group[unlist(grpIdx)]
    designTransY <- crossprod(designMat, ordY)

    muErrInv <- 1; muVarErrInv <- 1; muVarErrAinv <- 1; varErrAScl <- 1; nu = 2; muSigmaInv <- solve(rWishart(1, 2 * ncol(zmat), diag(ncol(zmat)))[ , , 1]); varBeta <- 100; sigAsScl <- rep(1, ncol(zmat));
    muErrInv <- 1; muVarErrInv <- 1; muVarErrAinv <- 1; varErrAScl <- 1; nu = 2; muRanCovInv <- solve(rWishart(1, 2 * ncol(zmat), diag(ncol(zmat)))[ , , 1]); varBeta <- 100; sigAsScl <- rep(1, ncol(zmat));
        invCoefCovMat <- muErrInv * designTransDesign + bdiag(c(list(diag(1 / varBeta, nfixef)), rep(list(muRanCovInv), ngroup)))
invCoefCovMat
image(invCoefCovMat)
        sqrtInvCoefSigmaMat <- chol(invCoefSigmaMat)
        sqrtInvCoefSigmaMat <- chol(invCoefCovMat)
rm(        sqrtInvCoefSigmaMat)
        sqrtInvCoefCovMat <- chol(invCoefCovMat)
        coefCovMat <- chol2inv(sqrtInvCoefSigmaMat)
        coefCovMat <- chol2inv(sqrtInvCoefCovMat)
coefCovMat
image(coefCovMat)
        coefMuMat <- muErrInv * coefCovMat %*% designTransY
head(coefMuMat)
image(coefMuMat)
        scaleErr <- sum((ordY - designMat %*% coefMuMat)^2) / 2 + sum(designTransDesign * coefCovMat) / 2 + muErrAInv
muErrAInv <- 1
        scaleErr <- sum((ordY - designMat %*% coefMuMat)^2) / 2 + sum(designTransDesign * coefCovMat) / 2 + muErrAInv
scaleErr
        shapeVarErr <- 0.5 * (ndim + 1)
        rm(shapeVarErr)
        ## update err. post. shape and rate
        scaleErr <- sum((ordY - designMat %*% coefMuMat)^2) / 2 + sum(designTransDesign * coefCovMat) / 2 + muErrAInv
        shapeErr <- 0.5 * (ndim + 1)
        muErrInv <- shapeErr / scaleErr

scaleErr
shapeErr
muErrInv
errAScl <- 1; 
        ## update post. for parameter in the px-ed form of half-cauchy prior for err
        shapeErrA <- 1
        scaleErrA <- muErrInv + errAScl
        muErrAInv <- shapeErrA / scaleErrA

        scaleRanCovAs <- nu * diag(muRanCovInv) + ranCovAsScl
ranCovAsScl <- rep(1, ncol(zmat))
        scaleRanCovAs <- nu * diag(muRanCovInv) + ranCovAsScl
        shapeRanCovAs <- 0.5 * (nu + nranef)
muRanCovAsInv <- shapeRanCovAs / scaleRanCovAs
        ranefCoefMuMat <- matrix(coefMuMat[-(1:nfixef)], nrow = nranef, ncol = ngroup)
ranefCoefMuMat
dim(ranefCoefMuMat)
size <- 6
mat <- matrix(seq_len(size ^ 2), ncol = size)

size
mat
low <- 0
high <- 3

delta <- rep(seq_len(ncol(mat)), nrow(mat)) - 
    rep(seq_len(nrow(mat)), each = ncol(mat))
delta
row(mat)
col(mat)
dim(coefCovMat)
        ranefCoefCovMat <- coefCovMat[-(1:nfixef), -(1:nfixef)]
head(ranefCoefCovMat)
dim(ranefCoefCovMat)
dim(ranefCoefMuMat)
175*4
        tcrossprod(ranefCoefMuMat, ranefCoefMuMat)
row(ranefCoefCovMat)
(row(ranefCoefCovMat) %% nranef == 0) & (col(ranefCoefCovMat) %% nranef == 0)
col(ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)])
row(ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)])
row(ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)]) + col(ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)])
row(ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)]) - col(ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)])
tmp <- ranefCoefCovMat[1:(2*nranef), 1:(2*nranef)]
tmp[ abs(row(tmp) - col(tmp)) <nranef ]
tmp[ (abs(row(tmp) - col(tmp))) < nranef ]
 (abs(row(tmp) - col(tmp))) < nranef 
tmp <- ranefCoefCovMat[1:(3*nranef), 1:(3*nranef)]
tmp
tmp[1:4, 1:4] + tmp[5:8, 5:8] + tmp[9:12, 9:12]
nranef
        ranefCoefSigmaMat <- diag(0, nranef)
        for (jj in 1:nranef) {
            idx <- ((jj - 1) * nranef + nfixef + 1):(jj * nranef + nfixef)
            ranefCoefSigmaMat <- ranefCoefSigmaMat + coefSigmaMat[idx, idx, drop = FALSE]
        }

        ranefCoefCovMat <- diag(0, nranef)
        for (jj in 1:nranef) {
            idx <- ((jj - 1) * nranef + nfixef + 1):(jj * nranef + nfixef)
            ranefCoefCovMat <- ranefCoefCovMat + coefCovMat[idx, idx, drop = FALSE]
        }
        

ranefCoefCovMat
        ranefCoefMuMat <- matrix(coefMuMat[-(1:nfixef)], nrow = nranef, ncol = ngroup)
        ranefCoefCovMat <- diag(0, nranef)
        for (jj in 1:nranef) {
            idx <- ((jj - 1) * nranef + nfixef + 1):(jj * nranef + nfixef)
            ranefCoefCovMat <- ranefCoefCovMat + coefCovMat[idx, idx, drop = FALSE]
        }
        scaleRanCovMat <- tcrossprod(ranefCoefMuMat, ranefCoefMuMat) + ranefCoefCovMat + 2 * nu * diag(muRanCovAsInv)
        rateRanCovMat <- solve(scaleRanCovMat)
rateRanCovmat
rateRanCovMat
        muRanCovInv <- (nu + ngroup + nranef - 1) * rateRanCovMat
muRanCovInv
res$cov
paste0("/datacommons/carin/ss602/nips15/lme/vb/res_", id, ".rds")
rm(list=ls())
id <- 1
